package net.jeroenimoo0.qatalog;

import static java.util.Arrays.asList;

import java.util.Arrays;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.Random;
import java.util.UUID;

import org.bson.Document;

import com.mongodb.Block;
import com.mongodb.MongoClient;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;

public class Main {
	private static enum Cause {
		FIRE,POISON,MONSTER;
		private static final int LENGTH = Cause.values().length;
	}
	
	private static MongoClient client;
	
	public static void main(String[] args) {
		//try {
		//	new Server(Protocol.HTTP, 8080, Status.class).start();
		//} catch (Exception e) {
		//	e.printStackTrace();
		//}
		
		
		try {
			client = new MongoClient("localhost");
		} finally {
			client.close();
		}
	}
	
	public static void listCount() {
		MongoDatabase db = client.getDatabase("users");
		
		MongoCollection<Document> users = db.getCollection("users");
		if(users == null) {
			users = db.getCollection("users");
			db.createCollection("users");
		}
		
		System.out.println(users.count());
	}
	
	public static void listDeathCounts() {
		MongoDatabase db = client.getDatabase("users");
		
		MongoCollection<Document> users = db.getCollection("users");
		if(users == null) {
			users = db.getCollection("users");
			db.createCollection("users");
		}
		
		//users.createIndex(new Document("deaths.cause",1));
		//if(true) return;
		
		
		
		long time = System.currentTimeMillis();
		users.aggregate(Arrays.asList(
				new Document("$unwind", "$deaths"),
				new Document("$group", 
						new Document()
							.append("_id", "$deaths.cause")
							.append("count", new Document("$sum",1))))
				).forEach(new Block<Document>() {
			
			@Override
			public void apply(Document arg0) {
				System.out.println(arg0);
			}
			
		});
		
		System.out.println("Took: " + (System.currentTimeMillis() - time) / 1000.0f);
		
		client.close();
	}
	
	public static void insertTest(int totalInsert, int batchSize) {
		insertTest(totalInsert, batchSize, true);
	}
	
	public static void insertTest(int totalInsert, int batchSize, boolean dropPrevious) {
		if(totalInsert % batchSize != 0) throw new RuntimeException("totalInsert % batchSize must be equal to zero");
		
		MongoDatabase db = client.getDatabase("users");
		
		MongoCollection<Document> users = db.getCollection("users");
		if(users == null) {
			users = db.getCollection("users");
			db.createCollection("users");
		}
		
		if(dropPrevious) users.drop();
		
		Random random = new Random();
		
		int batches = totalInsert / batchSize;
		long startTime = System.currentTimeMillis();
		
		for(int b = 0; b < batches; b++) {
			List<Document> documents = new LinkedList<>();
			
			for(int i = 0; i < batchSize; i++) {
				Document document = new Document();
				document.append("name", UUID.randomUUID());
				
				Document[] deaths = new Document[3];
				
				for(int j = 0; j < deaths.length; j++) {
					deaths[j] = new Document()
					.append("level:", random.nextInt(3) + 1)
					.append("time", new Date())
					.append("cause", Cause.values()[random.nextInt(Cause.LENGTH)].toString())
					.append("x", random.nextFloat() * 1000)
					.append("y", random.nextFloat() * 1000);
				}
				
				document.append("deaths", asList(deaths));
				documents.add(document);
			}
			
			users.insertMany(documents);
			System.out.println("Completed batch " + (b + 1) + "/" + batches + " (batch count " + batchSize + ")");
		}

		System.out.println("Done inserting, took " + (System.currentTimeMillis() - startTime) / 1000.0f + "s");
		System.out.println(users.count());
		
		client.close();
	}
}
